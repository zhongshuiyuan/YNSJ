package com.titan.ynsjy.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "JGDC_TB".
*/
public class JgdcDao extends AbstractDao<Jgdc, String> {

    public static final String TABLENAME = "JGDC_TB";

    /**
     * Properties of entity Jgdc.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property OBJECTID = new Property(0, String.class, "OBJECTID", false, "OBJECTID");
        public final static Property KZDH = new Property(1, String.class, "KZDH", true, "KZDH");
        public final static Property SZDM = new Property(2, String.class, "SZDM", false, "SZDM");
        public final static Property XIONGJING = new Property(3, double.class, "XIONGJING", false, "XIONGJING");
        public final static Property PJMSG = new Property(4, double.class, "PJMSG", false, "PJMSG");
        public final static Property JGDM = new Property(5, double.class, "JGDM", false, "JGDM");
        public final static Property GQZS = new Property(6, double.class, "GQZS", false, "GQZS");
        public final static Property GQXJ = new Property(7, double.class, "GQXJ", false, "GQXJ");
        public final static Property BEIZHU = new Property(8, String.class, "BEIZHU", false, "BEIZHU");
    };


    public JgdcDao(DaoConfig config) {
        super(config);
    }
    
    public JgdcDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        String sql = "CREATE TABLE " + constraint + "\"JGDC_TB\" (" + //
                "\"OBJECTID\" TEXT," + // 0: OBJECTID
                "\"KZDH\" TEXT PRIMARY KEY NOT NULL ," + // 1: KZDH
                "\"SZDM\" TEXT ," + // 2: SZDM
                "\"XIONGJING\" REAL ," + // 3: XIONGJING
                "\"PJMSG\" REAL ," + // 4: PJMSG
                "\"JGDM\" REAL ," + // 5: JGDM
                "\"GQZS\" REAL ," + // 6: GQZS
                "\"GQXJ\" REAL ," + // 7: GQXJ
                "\"BEIZHU\" TEXT);";
        
//        String sql = "CREATE TABLE " + constraint + "\"JGDC_TB\" (" + //
//                "\"OBJECTID\" TEXT," + // 0: OBJECTID
//                "\"KZDH\" TEXT PRIMARY KEY NOT NULL ," + // 1: KZDH
//                "\"SZDM\" TEXT NOT NULL ," + // 2: SZDM
//                "\"XIONGJING\" REAL NOT NULL ," + // 3: XIONGJING
//                "\"PJMSG\" REAL NOT NULL ," + // 4: PJMSG
//                "\"JGDM\" REAL NOT NULL ," + // 5: JGDM
//                "\"GQZS\" REAL NOT NULL ," + // 6: GQZS
//                "\"GQXJ\" REAL NOT NULL ," + // 7: GQXJ
//                "\"BEIZHU\" TEXT);";
        db.execSQL(sql); // 8: BEIZHU
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"JGDC_TB\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Jgdc entity) {
        stmt.clearBindings();
 
        String OBJECTID = entity.getOBJECTID();
        if (OBJECTID != null) {
            stmt.bindString(1, OBJECTID);
        }
 
        String KZDH = entity.getKZDH();
        if (KZDH != null) {
            stmt.bindString(2, KZDH);
        }
        stmt.bindString(3, entity.getSZDM());
        stmt.bindDouble(4, entity.getXIONGJING());
        stmt.bindDouble(5, entity.getPJMSG());
        stmt.bindDouble(6, entity.getJGDM());
        stmt.bindDouble(7, entity.getGQZS());
        stmt.bindDouble(8, entity.getGQXJ());
 
        String BEIZHU = entity.getBEIZHU();
        if (BEIZHU != null) {
            stmt.bindString(9, BEIZHU);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public Jgdc readEntity(Cursor cursor, int offset) {
        Jgdc entity = new Jgdc( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // OBJECTID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // KZDH
            cursor.getString(offset + 2), // SZDM
            cursor.getDouble(offset + 3), // XIONGJING
            cursor.getDouble(offset + 4), // PJMSG
            cursor.getDouble(offset + 5), // JGDM
            cursor.getDouble(offset + 6), // GQZS
            cursor.getDouble(offset + 7), // GQXJ
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // BEIZHU
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Jgdc entity, int offset) {
        entity.setOBJECTID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setKZDH(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSZDM(cursor.getString(offset + 2));
        entity.setXIONGJING(cursor.getDouble(offset + 3));
        entity.setPJMSG(cursor.getDouble(offset + 4));
        entity.setJGDM(cursor.getDouble(offset + 5));
        entity.setGQZS(cursor.getDouble(offset + 6));
        entity.setGQXJ(cursor.getDouble(offset + 7));
        entity.setBEIZHU(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Jgdc entity, long rowId) {
        return entity.getKZDH();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Jgdc entity) {
        if(entity != null) {
            return entity.getKZDH();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
